@{
    ViewBag.Title = "Array";
    Layout = "~/Views/Shared/_LinearLayout.cshtml";
}

<!-- Tab panes -->
<div class="tab-content">
    <div class="tab-pane active" id="pnlSyntax" role="tabpanel" style="margin-top:5px;">
        <div class="row">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="tab" href="#pnlOne" role="tab">Onedimensional</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#pnlMulti" role="tab">Multidimensional</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#pnlParams" role="tab">Parameter</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#pnlJagged" role="tab">Jagged</a>
                </li>
            </ul>
        </div>

        <div class="tab-content">
            <div class="tab-pane active" id="pnlOne" role="tabpanel" style="margin-top:5px;">
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Initialization</u>:
                        </div>
                        <div class="col-sm-8" style="margin-left:20px;">
                            syntax: type[ ] array-name;
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                            Example:
                        </div>
                        <div class="col-sm-9">
                            string[ ] names; names = new string[10];
                            <br />
                            string[ ] names = new string[10];
                            <br />
                            int[ ] numbers = new int[ ] {1,2,3,4,5};
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Setting Values</u>:
                        </div>
                        <div class="col-sm-3" style="margin-left:20px;">
                            names[2] = "Raymond";
                        </div>
                        <div class="col-sm-3">
                            names.SetValue[2, "Raymond"];
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Accessing Values</u>:
                        </div>
                        <div class="col-sm-3" style="margin-left:20px;">
                            var myname = names[2];
                        </div>
                        <div class="col-sm-4">
                            var thisMonthSales = names.GetValue[2];
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Looping Through</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            (for int i = 0; i <= sales.Length-1; i++) { <br />
                            &nbsp;&nbsp;&nbsp; totalSales = totalSales + sales[i];<br />
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-3">
                            <u>Methods and Properties</u>:
                        </div>
                    </div>
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>Length</u>:
                        </div>
                        <div class="col-sm-8">
                            string names[ ] = new string[10]; names.Length; returns 10
                        </div>
                    </div>
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>GetLength</u>:
                        </div>
                        <div class="col-sm-8">
                            string names = new string[10];  namesa.GetLength(0); returns 10
                        </div>
                    </div>
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>Rank</u>:
                        </div>
                        <div class="col-sm-8">
                            string names = new string[10];  names.Rank; returns 1
                        </div>
                    </div>
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>GetType</u>:
                        </div>
                        <div class="col-sm-8">
                            int[ ] a = new int[5];  var arrayType = a.GetType().GetElementType();
                            returns int
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="pnlMulti" role="tabpanel" style="margin-top:5px;">
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Initialization</u>:
                        </div>
                        <div class="col-sm-8" style="margin-left:20px;">
                            syntax: type[,] array-name;
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                            Example:
                        </div>
                        <div class="col-sm-9">
                            double[,] sales; sales = new double[4,5]; // 4 rows, 5 cols
                            <br />
                            double[,] sales = new double[4,5];
                            <br />
                            int[,] grdes = new int[,] {{1,2,3,4,5} {4,5,6,7,8},{7,8,9,10,11},{10,11,12,13,14}};
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Setting Values</u>:
                        </div>
                        <div class="col-sm-3" style="margin-left:20px;">
                            grades[2,2] = 99;
                        </div>
                        <div class="col-sm-3">
                            grades.SetValue[2, 99];
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Accessing Values</u>:
                        </div>
                        <div class="col-sm-3" style="margin-left:20px;">
                            var grade = grades[2,2];
                        </div>
                        <div class="col-sm-4">
                            var thisMonthSales = grades.GetValue[2,2];
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Looping Through</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            int rowCount = grades.GetUpperBound(0); <br />
                            int colCount = grades.GetUpperBound(1); <br />

                            (for int row = 0; row <= rowCount; row++) { <br />
                            &nbsp;&nbsp;&nbsp;  (for int col = 0; col <= colCount; col++) { <br />
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    total += grades[row, col]; <br />
                            &nbsp;&nbsp;&nbsp;}<br />
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-3">
                            <u>Methods and Properties</u>:
                        </div>
                    </div>

                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>Length</u>:
                        </div>
                        <div class="col-sm-8">
                            int grades[,] = new int[4,5]; grades.Length; returns 20
                        </div>
                    </div>

                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>GetLength</u>:
                        </div>
                        <div class="col-sm-8">
                            int grades[,] = new int[4,5];  grades.GetLength(0); returns 4
                            and grades.GetLength(1); returns 5
                        </div>
                    </div>

                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>Rank</u>:
                        </div>
                        <div class="col-sm-8">
                            int grades[,] = new int[4,5];  grades.Rank; returns 2
                        </div>
                    </div>

                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-1">
                            <u>GetType</u>:
                        </div>
                        <div class="col-sm-8">
                            int[,] grades = new int[4,5]; var arrType = a[0,1].GetType().GetElementType();
                            returns int
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="pnlParams" role="tabpanel" style="margin-top:5px;">
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Initialization</u>:
                        </div>
                        <div class="col-sm-8" style="margin-left:20px;">
                            syntax: params int[ ] variable-name;
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                            Example:
                        </div>
                        <div class="col-sm-9">
                            public int sumNums(params int[ ] nums) {  }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Setting Values</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            Same as onedimensional aray
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Accessing Values</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            Same as onedimensional aray
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Looping Through</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            public int sumNums(params int[ ] nums) {  <br />
                            &nbsp;&nbsp;&nbsp; (for int i = 0; i <= nums.GetUpperBound(0); i++) { <br />
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += nums[i]; <br />
                            &nbsp;&nbsp;&nbsp; } <br />
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-3">
                            <u>Methods and Properties</u>:
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-9" style="margin-left:10px;">
                            Same as onedimensional aray
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="pnlJagged" role="tabpanel" style="margin-top:5px;">
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Initialization</u>:
                        </div>
                        <div class="col-sm-8" style="margin-left:20px;">
                            syntax: type[ ][ ] arrayname = new int[12][ ];
                        </div>
                    </div>

                    <div class="row" style="margin-left:10px;">
                        <div class="col-sm-2">
                            Example:
                        </div>
                        <div class="col-sm-9">
                            int[ ][ ] jagged = new int[12][ ]; // 12 rows and blank cols (contains one dimensional arrays)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Setting Values</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            jagged[0][0] = 23; &nbsp; &nbsp; (OR)
                            <br />
                            int[ ] Jan = new int[31];
                            int[ ] Feb = new int[29];
                            int[ ][ ] months = new int{Jan, Feb};
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Accessing Values</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            var grade = grades[0][2]; //Firt row, second column array
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-2">
                            <u>Looping Through</u>:
                        </div>
                        <div class="col-sm-9" style="margin-left:20px;">
                            int[ ][ ] arr = new int[2][ ]; <br />
                            arr[0] = new int[5] {1,3,5,7,9}; <br />
                            arr[1] = new int[4] {2,4,6,8}; <br />

                            (for int i = 0; i <= arr.Length-1; i++) { <br />
                            &nbsp;&nbsp;&nbsp; 
                            (for int j = 0; j <= arr[i].Length-1; j++) { <br />
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                Console.WriteLine(arr[i][j]); <br />
                            &nbsp;&nbsp;&nbsp; }<br />
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-3">
                            <u>Methods and Properties</u>:
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-9" style="margin-left:10px;">
                            Mostly as onedimensional aray
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane" id="pnlNotes" role="tabpanel" style="margin-top:5px;">
        <p align="justify">
            Derives from System.Array namespace
        </p>
        <p align="justify">
            <u>Length</u>:  Returns total number of elements from all dimensions.
            <br />
            <u>GetLength</u>: Returns number of elements of a specified dimension.
            <br />
            <u>Rank</u>: Returns the number of dimensions of an array.
            <br />
            <u>GetType</u>: Returns the type of current array instance.
            <br />
            <u>GetElementType</u>: Returns the actual data type of current array address instance.
        </p>
        <p align="justify"> <u>Array Types</u>: Onedimensional, Multidimensional, Parameter, and Jagged Arrays</p>
        <p align="justify">
            <u>Multidimensional Arrays</u>:
            C# can have up to 32 dimensions. These are declared by providing the upper bound of each of the dimensions of the
            array. The two dimentional declaration: int[,] grades = new int[4,5]; declares an array that consists of
            4 rows and 5 columns. Setting and Getting multidimensional arrays are same as single dimensional arrays.
        </p>
        <p align="justify">
            <u>Parameter Arrays</u>:
            There are times when you want to write a method definition that allows an optional number of parameters. Parameter
            Arrays helps you do this. ParamArray is the keyword to define a parameter array.
            Declaration: public int sumNums(params int[] nums)
        </p>
        <p align="justify">
            <u>Jagged Arrays</u>:
            A jagged array is an arrays of arrays where each row of an array is made up of an array. Each dimension of a jagged
            array is a one dimensional array. It is called as jagged because the number of elements in each row may be different.
        </p>
        <p align="justify">
            int [ ] [ ] jagged = new int[12][ ]; <br /><br />
            The first set of paranthesis indicates the number of rows and the second set of paranthesis left blank to hold the 
            one-dimensional array that is stored in each row.
        </p>
        <p align="justify">
            <u>Multidimensional Vs Jagged</u>:
            Multidimensional contains same number of cols in each row, whereas Jagged arrays can have different number of
            cols as the second paranthesis of the definition contains a onedimensional array
        </p>
    </div>
</div>
